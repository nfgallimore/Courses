#! /opt/local/bin/perl -w

eval 'case $# in 0) exec /opt/local/bin/perl -S "$0";; *) exec /opt/local/bin/perl -S "$0" "$@";; esac'
    if 0;

# lfsr-generator: A source code generator for LFSRs.
# Copyright (C) 2007  Wakabayashi Masaki
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

package PackageInfo;

use strict;

my $package_name = 'lfsr-generator';
my $package_version = '1.0.2';
my $package_description = 'A source code generator for LFSRs.';
my $package_url = 'http://lfsr-generator.sourceforge.net/';

sub show_help($)
{
	my $me = shift;
	print << "__EOS__";
$package_name: $package_description

usage: $me [options]

Startup:
  -h, --help     show this help.
  -V, --version  show the version.

LFSR options:
  --config=STRING       set the configuration: `fibonacci' or `galois'.
  --length=NUMBER       set the length.
  --shift-amounts=LIST  comma-separated list of shift amounts.
  --taps=LIST           comma-separated list of tap sequences.
  --shift-left          set the direction of shifting to left.

Code options:
  --function-name=STRING       set the name of the function.
  --function-qualifier=STRING  set qualifier of the function.
  --function-template          generate a function template. (C++ only)
  --header                     equivalent to `--include-guard --prototype'.
  --include-guard              generate with an include guard.
  --includes=LIST              comma-separated list of pre-included files.
  --language=STRING            set language: `c' or `c++'.
  --namespace=STRING           set the namespace of the function. (C++ only)
  --no-extern-c-guard          remove an `extern "C"' guard.
  --prototype                  generate the prototype of the function.
  --variable-type=STRING       set variable type used in the function.

Other options:
  --no-auto      disable auto-correcting of settings.

See $package_url for more details.
__EOS__
}

sub show_version()
{
	print << "__EOS__";
$package_name $package_version

Copyright (C) 2007  Wakabayashi Masaki
$package_name is free software, distributed under the terms of the GNU
General Public License version 2.  It comes WITHOUT ANY WARRANTY.
__EOS__
}

sub show_sourcecode_header_comment()
{
	print << "__EOS__";
/*

This file is generated by $package_name $package_version.
Copyright (C) 2007  Wakabayashi Masaki

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
__EOS__
}

package ParameterSet;

use strict;
use Carp;

sub new
{
	my %valid_type = map { ( $_ => 1 ) }
		qw(bool integer string enum numeric_list string_list);
	my $class = shift;
	return if ((scalar(@_) % 2) != 0);
	my $self = bless {}, $class;
	while (@_) {
		my ($key, $list) = splice(@_, 0, 2);
		return if (ref $list ne 'ARRAY' || scalar(@$list) < 2);
		my $type = shift @$list;
		return if (!exists $valid_type{$type});
		my $value = pop @$list;
		if ($type eq 'enum') {
			return if (scalar(@$list) < 1);
			my $valid_values = shift @$list;
			return if (ref $valid_values ne 'ARRAY');
			$self->{$key} = [ $type, [ @$valid_values ], undef ];
		} else {
			$self->{$key} = [ $type, undef ];
		}
		return if (scalar(@$list) != 0);
		$self->set($key, $value) or return;
	}
	$self;
}

sub set
{
	my ($self, $key, $value) = @_;
	return if (!exists $self->{$key});
	my $list = $self->{$key};
	my $type = $list->[0];
	$list->[-1] = do {
		if ($type eq 'bool') {
			!!$value;
		} elsif ($type eq 'integer') {
			return if ($value !~ /^\d+$/);
			$value;
		} elsif ($type eq 'string') {
			"$value";
		} elsif ($type eq 'enum') {
			my $valid_values = $list->[1];
			$value = "$value";
			return if (!exists { map { ($_ => 1) } @$valid_values }->{$value});
			$value;
		} elsif ($type eq 'numeric_list') {
			return if (ref $value ne 'ARRAY');
			foreach (@$value) { return if ($_ !~ /^\d+$/); }
			[ @$value ];
		} elsif ($type eq 'string_list') {
			return if (ref $value ne 'ARRAY');
			$_ = "$_" for (@$value);
			[ @$value ];
		} else {
			croak 'internal error';
		}
	};
	1;
}

sub keys
{
	CORE::keys %{+shift};
}

sub get
{
	my ($self, $key) = @_;
	return if (!defined $key || !exists $self->{$key});
	my $value = $self->{$key}->[-1];
	(ref $value eq 'ARRAY') ? @$value : $value;
}

sub get_getoptlong_args
{
	my $self = shift;
	map {
		my $key = $_;
		my $type = $self->{$key}->[0];
		$key . (($type eq 'bool') ? '!' : (($type eq 'integer') ? '=i' : '=s'));
	} CORE::keys %$self;
}

sub set_getoptlong_result
{
	my ($self, $tbl) = @_;
	foreach my $key (sort(CORE::keys %$self)) {
		next if (!exists $tbl->{$key});
		my $list = $self->{$key};
		my $type = $list->[0];
		my $value = $tbl->{$key};
		$list->[-1] = do {
			if ($type eq 'bool') {
				!!$value;
			} elsif ($type eq 'integer') {
				if ($value < 0) {
					carp qq|non-negative number is required |,
					     qq|for option `$key'.\n|;
					return;
				}
				$value;
			} elsif ($type eq 'string') {
				$value;
			} elsif ($type eq 'enum') {
				my $valid_values = $list->[1];
				if (!exists { map { ($_ => 1) } @$valid_values }->{$value}) {
					carp qq|invalid argument for option `$key'.\n|;
					return;
				}
				$value;
			} elsif ($type eq 'numeric_list') {
				if ($value !~ /^\d+(,\d+)*$/) {
					carp qq|invalid argument for option `$key'.\n|;
					return;
				}
				[ split /,/, $value ];
			} elsif ($type eq 'string_list') {
				[ split /,/, $value ];
			} else {
				croak 'internal error';
			}
		};
	}
	1;
}

package main;

use strict;
use Getopt::Long;

sub min(@)
{
	(sort { $a <=> $b } @_)[0];
}

sub max(@)
{
	(sort { $b <=> $a } @_)[0];
}

sub maxwidth($@)
{
	my $fmt = shift;
	max(map { length sprintf($fmt, $_) } @_);
}

sub min_distance_of_taps(@)
{
	my @taps = sort { $a <=> $b } (0, @_);
	min(map { $taps[$_ + 1] - $taps[$_] } (0 .. ($#taps - 1)));
}

sub print_indent($@)
{
	my $indents = shift;
	print "\t" x $indents;
	print @_ if (@_);
}

sub show_sourcecode_include_guard_begin($)
{
	my $guard = shift;
	print << "__EOS__";
#ifndef $guard
#define $guard 1
__EOS__
}

sub show_sourcecode_include_guard_end($)
{
	my $guard = shift;
	print << "__EOS__";
#endif /* $guard */
__EOS__
}

sub show_sourcecode_include($)
{
	my $file = shift;
	print << "__EOS__";
#include $file
__EOS__
}

sub show_sourcecode_extern_c_guard_begin()
{
	print << "__EOS__";
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
__EOS__
}

sub show_sourcecode_extern_c_guard_end()
{
	print << "__EOS__";
#ifdef __cplusplus
} /* end of extern "C" */
#endif /* __cplusplus */
__EOS__
}

sub show_sourcecode_namespace_begin(@)
{
	if (scalar(@_) != 0) {
		print "namespace $_ {\n" for (@_);
	} else {
		print "namespace {\n";
	}
}

sub show_sourcecode_namespace_end(@)
{
	if (scalar(@_) != 0) {
		while (@_) {
			print '} /* end of namespace ', join('::', @_), " */\n";
			pop @_;
		}
	} else {
		print "} /* end of unnamed namespace */\n";
	}
}

sub show_sourcecode_list($$@)
{
	my $indents = shift;
	my $suffix = shift || '';
	my $width = max(map { length $_ } @_);
	foreach (0 .. $#_) {
		print_indent $indents;
		printf('%-' . $width . 's', $_[$_]);
		print $suffix if ($_ != $#_);
		print "\n";
	}
}

sub show_sourcecode_alist($$$@)
{
	my ($indents, $separator) = splice(@_, 0, 2);
	my $suffix = shift || '';
	my $key_width = max(map { length $_->[0] } @_);
	foreach (0 .. $#_) {
		print_indent $indents;
		printf('%-' . $key_width . 's', $_[$_]->[0]);
		print $separator;
		print $_[$_]->[1];
		print $suffix if ($_ != $#_);
		print "\n";
	}
}

sub show_sourcecode_numeric_alist($$$@)
{
	my ($indents, $separator, $suffix) = splice(@_, 0, 3);
	my $value_width = maxwidth('%d', map { $_->[1] } @_);
	$_ = [$_->[0], sprintf('%' . $value_width . 'd', $_->[1])] for (@_);
	unshift(@_, $indents, $separator, $suffix);
	goto &show_sourcecode_alist;
}

sub generate_shift_lfsr_function($)
{
	my $paramset = shift;
	my $config = $paramset->get('config');
	my $length = $paramset->get('length');
	my @shamts = $paramset->get('shift-amounts');
	my $shift_right = !$paramset->get('shift-left');
	my @taps = sort { $b <=> $a } $paramset->get('taps');
	my $extern_c_guard = $paramset->get('extern-c-guard');
	my $function_name = $paramset->get('function-name');
	my $function_qualifier = $paramset->get('function-qualifier');
	my $function_template = $paramset->get('function-template');
	my @includes = $paramset->get('includes');
	my $include_guard = $paramset->get('include-guard');
	my $language = $paramset->get('language');
	my @namespace = split /::/, $paramset->get('namespace');
	my $prototype = $paramset->get('prototype');
	my $wordtype = 'T';
	my $variable_type
		= $function_template ? $wordtype : $paramset->get('variable-type');
	my $is_fibonacci = ($config eq 'fibonacci');
	my $is_galois = ($config eq 'galois');
	(my $guard_name = $function_name . '_h') =~ tr/a-z/A-Z/;
	my $enable_namespace = (scalar(@namespace) > 0);
	@namespace = () if (scalar(@namespace) == 1 && $namespace[0] eq '-');
	my $static_cast = {
		'c' => sub {
			my ($type, $value) = @_;
			"($type)($value)";
		},
		'c++' => sub {
			my ($type, $value) = @_;
			"static_cast<$type>($value)";
		},
	}->{$language} or die 'internal error';
	die 'invalid precondition found' unless (
		(
			$length > 0 &&
			scalar(@shamts) > 0 && min(@shamts) > 0 &&
			scalar(@taps) > 0 && min(@taps) > 0 &&
			(!$is_galois || scalar(@shamts) == 1) &&
			$function_name ne '' &&
			$variable_type ne ''
		) || $prototype
	);
	PackageInfo::show_sourcecode_header_comment();
	if ($include_guard) {
		print "\n";
		show_sourcecode_include_guard_begin($guard_name);
	}
	if (@includes) {
		print "\n";
		show_sourcecode_include($_) for (@includes);
	}
	if ($extern_c_guard) {
		print "\n";
		show_sourcecode_extern_c_guard_begin();
	}
	if ($enable_namespace) {
		print "\n";
		show_sourcecode_namespace_begin(@namespace);
	}
	if ($prototype) {
		print "\n";
		print "template <typename $variable_type>\n" if ($function_template);
		print "$function_qualifier " if ($function_qualifier ne '');
		print "$variable_type $function_name($variable_type);\n";
	} else {
		print "\n";
		my $fmt_tap = 'tap_%0' . maxwidth('%u', 0 .. $#taps) . 'u';
		my $fmt_shamt = 'shift_amount_%0' . maxwidth('%u', 0 .. $#shamts) . 'u';
		{
			# header
			print "template <typename $variable_type>\n"
				if ($function_template);
			print "$function_qualifier " if ($function_qualifier ne '');
			print "$variable_type $function_name($variable_type v)\n";
			print "{\n";
		}
		{
			# configuration information
			print_indent 1, "/*\n";
			show_sourcecode_alist(2, ' : ', '', (
				['config', $config],
				['length', $length],
				['taps', '(' . join(', ', @taps) . ')'],
				$is_fibonacci ?
					['shift-amounts', '(' . join(', ', @shamts) . ')'] :
					['shift-amount', $shamts[0]],
				['shift-direction', ($shift_right ? 'right' : 'left')]
			));
			print_indent 1, "*/\n";
		}
		{
			# static constants
			print_indent 1, "enum {\n";
			show_sourcecode_numeric_alist(2, ' = ', ',', do {
				my @l = (
					['length', $length],
					map { [sprintf($fmt_tap, $_), $taps[$_]] } (0 .. $#taps)
				);
				if ($is_fibonacci) {
					push @l, map { [sprintf($fmt_shamt, $_), $shamts[$_]] }
						(0 .. $#shamts);
				}
				@l;
			});
			print_indent 1, "};\n";
		}
		{
			# typedefs
			print_indent 1, "typedef $variable_type $wordtype;\n"
				if (!$function_template);
		}
		if ($is_fibonacci) {
			# calculations for Fibonacci configuration
			print_indent 1,
				"const $wordtype zero = ",
				$static_cast->($wordtype, '0'),
				";\n";
			foreach (0 .. $#shamts) {
				my $shamt = sprintf($fmt_shamt, $_);
				print_indent 1, "v = (\n";
				print_indent 2, "(\n";
				print_indent 3, 'v ', ($shift_right ? '>>' : '<<'), " $shamt\n";
				print_indent 2, ") | (\n";
				print_indent 3, "(\n";
				show_sourcecode_list(4, ' ^', map {
					my $tap = sprintf($fmt_tap, $_);
					'(v ' . ($shift_right ? '<<' : '>>') . " ($tap - $shamt))"
				} (0 .. $#taps));
				print_indent 3, ") & (\n";
				print_indent 4,
					"~(~zero << $shamt)",
					($shift_right ? " << (length - $shamt)" : ''),
					"\n";
				print_indent 3, ")\n";
				print_indent 2, ")\n";
				print_indent 1, ");\n";
			}
		} else {
			# calculations for Galois configuration
			print_indent 1,
				"const $wordtype zero = ",
				$static_cast->($wordtype, '0'),
				";\n";
			print_indent 1,
				"const $wordtype lsb = zero + ",
				$static_cast->($wordtype, '1'),
				";\n";
			print_indent 1, "const $wordtype feedback = (\n";
			show_sourcecode_list(2, ' ^', map {
				my $tap = sprintf($fmt_tap, $_);
				'(lsb << (' .
				($shift_right ? "$tap - 1" : "length - $tap") .
				'))'
			} (0 .. $#taps));
			print_indent 1, ");\n";
			{
				my $shifted_lfsr = 'v ' . ($shift_right ? '>>' : '<<') . ' 1';
				my $feedback = $shift_right ?
					'(zero - (v & lsb)) & feedback' :
					'(zero - ((v >> (length - 1)) & lsb)) & feedback';
				my $code = "v = ($shifted_lfsr) ^ ($feedback);";
				print_indent 1, $code, "\n" for (1 .. $shamts[0]);
			}
		}
		{
			# footer
			print_indent 1, "return v;\n";
			print "}\n";
		}
	}
	if ($enable_namespace) {
		print "\n";
		show_sourcecode_namespace_end(@namespace);
	}
	if ($extern_c_guard) {
		print "\n";
		show_sourcecode_extern_c_guard_end();
	}
	if ($include_guard) {
		print "\n";
		show_sourcecode_include_guard_end($guard_name);
	}
}

# main
{
	(my $myname = $0) =~ s|.*/||;
	my $paramset = new ParameterSet(
		#
		# LFSR options
		'config'        => [ 'enum', [ 'fibonacci', 'galois' ], 'fibonacci' ],
		'length'        => [ 'integer',      0     ],
		'shift-amounts' => [ 'numeric_list', [ 1 ] ],
		'shift-left'    => [ 'bool',         undef ],
		'taps'          => [ 'numeric_list', []    ],
		#
		# Code options
		'language'           => [ 'enum', [ 'c', 'c++' ], 'c' ],
		'extern-c-guard'     => [ 'bool',        1              ],
		'function-name'      => [ 'string',      'shift_lfsr'   ],
		'function-qualifier' => [ 'string',      ''             ],
		'function-template'  => [ 'bool',        undef          ],
		'includes'           => [ 'string_list', []             ],
		'include-guard'      => [ 'bool',        undef          ],
		'namespace'          => [ 'string',      ''             ],
		'prototype'          => [ 'bool',        undef          ],
		'variable-type'      => [ 'string',      'unsigned int' ],
	);
	{
		my %h = ('auto' => 1);
		GetOptions(\%h,
			$paramset->get_getoptlong_args(),
			'help|h!', 'version|V!', 'auto!', 'header!', 'shift-right!')
			or exit(1);
		$h{help} = 1 if (
			!$h{'version'} &&
			!$h{'header'} &&
			!$h{'prototype'} &&
			!((exists $h{'length'} && $h{'length'} >= 1) && exists $h{'taps'})
		);
		if ($h{'help'}) {
			PackageInfo::show_help($myname);
			exit(0);
		}
		if ($h{'version'}) {
			PackageInfo::show_version();
			exit(0);
		}
		if ($h{'header'}) {
			$h{'include-guard'} = 1;
			$h{'prototype'} = 1;
		}
		if ($h{'shift-right'}) {
			$h{'shift-left'} = undef;
		}
		$paramset->set_getoptlong_result(\%h)
			or exit(1);
		if (!$paramset->get('prototype')) {
			if (min($paramset->get('shift-amounts')) == 0) {
				die "too small shift amounts found.\n";
			}
			if (min($paramset->get('taps')) == 0) {
				die "too small tap sequences found.\n";
			}
			if (max($paramset->get('taps')) > $paramset->get('length')) {
				die "too large tap sequences found.\n";
			}
			if ($paramset->get('config') eq 'fibonacci') {
				if (max($paramset->get('shift-amounts'))
					> min_distance_of_taps($paramset->get('taps'))) {
					die "too large shift amounts found " .
					    "for Fibonacci configuration.\n";
				}
			} else {
				if (scalar($paramset->get('shift-amounts')) != 1) {
					die "invalid shift amounts " .
					    "for Galois configuration.\n";
				}
			}
		}
		if ($paramset->get('namespace') ne '' &&
			$paramset->get('namespace') ne '-' &&
			$paramset->get('namespace') !~ /^\w+(::\w+)*$/) {
			die "invalid namespace.\n";
		}
		if ($h{'auto'}) {
			if ($paramset->get('function-template') ||
				$paramset->get('namespace')) {
				$paramset->set('language', 'c++');
				$paramset->set('extern-c-guard', undef);
			}
			if ($paramset->get('function-template')) {
				$paramset->set('include-guard', 1);
			}
		}
	}
	generate_shift_lfsr_function($paramset);
}
0;
